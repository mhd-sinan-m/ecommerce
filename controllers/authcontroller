const valid = require("../utilities/valid")
const bcrypt = require("bcrypt")
const signupModel = require("../models/signupModel")

// signupGet
const signupGet = (req, res) => {
    res.render('client/signup')
}
const signupPost = async (req, res) => {
    const { fullName, username, email, password } = req.body
    const existM = await signupModel.findOne({ email })
    const existU = await signupModel.findOne({ username })
    try {
        if (username === "" || password === "")
            res.status(400).render("client/error", { errr: 'All Feilds Are required' })

        //CHECK MAIL
        else if (existM) {
            res.status(400).render("client/error", { errr: 'EMAIL Already Taken' })
        }
        else if (!valid.mailValid(email)) {
            res.status(400).render("client/error", { errr: 'Invalid EMAIL' })
        }
        // CHECK USERNAME
        else if (existU) {
            res.status(400).render("client/error", { errr: 'USERNAME Already Taken' }
            )
        }
        // CHECK PASS

        else if (!valid.passwordValid(password)) {
            console.log(valid.passwordValid(password))
            res.status(400).render("client/error", { errr: 'Invalid 123654789' })
        }

        else {

            // Generate a random salt
            const saltRounds = 10;
            const salt = await bcrypt.genSalt(saltRounds)
            const hashe = await bcrypt.hash(password, salt)


            // NEW USER
            const newUser = new signupModel({
                fullName,
                username,
                email,
                password: hashe
            })
            const user = await newUser.save()
            res.status(200).redirect("/signin")
        }
    }
    catch (err) {
        console.error('SignUn failed 500', err);
        res.status(500).json('Internal server erro(in signUP)');
    }
}

// signIn
const signinGet = (req, res) => {
    if (req.session.admin) {
        res.redirect(`/admin`)
    }
    else if (req.session.user) {
        res.redirect(`/`)
    }
    else {
        res.render("client/signin")
    }
}
const signinPost = async (req, res) => {

    const { username, password } = req.body
    const existU = await signupModel.findOne({ username })
    console.log(existU)
    const compaireP =  await bcrypt.compare(password, existU.password)
    const role = existU.role

    try {
        if (username === "" || password === "")
            res.status(400).render("client/error", { errr: 'All Feilds Are required' })
        // CHECK USER
        else if (!existU || !compaireP) {
            res.status(404).render("client/error", { errr: "Incorrect PASSWORD or USERNAME" })
        }

        else if (role === 'admin') {
            console.log(existU.username)
            req.session.admin = true;
            res.redirect(`/admin/`)
        }
        else if (role === 'user') {
            req.session.user = true;
            res.redirect(`/?username=${existU.username}`)
        }
        else {
            res.redirect(`/?username=${existU.username}`)
        }
    }
    catch (err) {
        console.log('Signin failed 500', err);
        res.status(500).json('Internal server error (in signin)');
    }
}

const home = async (req, res) => {
    const username = req.query.username
    const existU = await signupModel.findOne({ username })
    try {
        const fullName = existU.fullName
        res.status(200).render('client/home', { user: username, name: fullName })
    }
    catch {
        res.status(200).render('client/home', { user: username })
    }
}

module.exports = { signupGet, signupPost, signinGet, signinPost, home }

